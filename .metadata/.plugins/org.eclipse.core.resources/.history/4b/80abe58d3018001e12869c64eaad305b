package com.usm.serviceImpl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.stream.Stream;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.usm.bindings.User;
import com.usm.constants.Constants;
import com.usm.entity.CityEntity;
import com.usm.entity.CountryEntity;
import com.usm.entity.StateEntity;
import com.usm.entity.UserEntity;
import com.usm.prop.AppProperties;
import com.usm.repositories.CityRepository;
import com.usm.repositories.CountryRepsitory;
import com.usm.repositories.StateRepository;
import com.usm.repositories.UserRepository;
import com.usm.service.RegistrationService;
import com.usm.util.EmailUtils;

@Service
public class RegistrationServiceImpl implements RegistrationService {

	@Autowired
	private UserRepository userRepo;

	@Autowired
	private CountryRepsitory countryRepo;

	@Autowired
	private StateRepository stateRepo;

	@Autowired
	private CityRepository cityRepo;
	
	@Autowired
	private EmailUtils emailUtil;
	
	@Autowired
	private AppProperties appProperties;
	
	
	@Override
	public boolean checkUniqueEmail(String email) {
		UserEntity userEntity = userRepo.findByUserEmail(email);
		if (userEntity == null)
			return false;
		return true;
	}

	@Override
	public Map<String, String> getCountries() {

		List<CountryEntity> allCountries = countryRepo.findAll();
		Map<String, String> map = new HashMap<>();

		for (CountryEntity entity : allCountries) {
			map.put(entity.getCountryId(), entity.getCountryName());
		}

		return map;
	}

	@Override
	public Map<String, String> getStates(String countryId) {
		List<StateEntity> states = stateRepo.findByCountryId(countryId);
		
		Map<String, String> map = new HashMap<>();
		
		for(StateEntity entity: states) {
			map.put(entity.getStateId(), entity.getStateName());
		}
		return map;
	}

	@Override
	public Map<String, String> getCities(String stateId) {
		
		List<CityEntity> cities = cityRepo.findByStateId(stateId);
		
		Map<String, String> cityMap = new HashMap<>();
		
		for(CityEntity entity: cities) {
			cityMap.put(entity.getCityId(), entity.getCityName());
		}
		return cityMap;
		
	}

	@Override
	public boolean registerUser(User user) {
		user.setPassword(getTempPassword());
		user.setAccountStatus("LOCKED");
		
		UserEntity userEntity = new UserEntity();
		BeanUtils.copyProperties(user, userEntity);
		
		UserEntity newUser = userRepo.save(userEntity);
		if(newUser.getUserId() != null) {
			return sendRegistrationEmail(user); 
		}
		
		return false;
	}
	
	private String getTempPassword() {
		
		int leftLimit = 48;
		int rightLimit = 122;
		int targetPasswordLength = 8;
		Random random = new Random();
		String generatedPassword = random.ints(leftLimit, rightLimit+1)
				.filter(i->(i <=57 || i>= 65) && (i<=90 || i>=97))
				.limit(targetPasswordLength)
				.collect(StringBuilder::new, StringBuilder:: appendCodePoint, StringBuilder::append)
				.toString();
		
		return generatedPassword;
	}

	private boolean sendRegistrationEmail(User user) {
		 boolean emailSent = false;
		 
		 try {
			/* Taking the data from yml file */
			 Map<String, String> messages = appProperties.getMessages();
			 String subject = messages.get("regMailSubject");
			 String body = readMailBody("regMailBodyFile",user);
			 
			 //String body ="<h1> Hello {user.getName()} !</h1> <br> Your temporary password is " + "";
			 emailSent = emailUtil.sendMail(user.getEmail(), body, subject);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
		return emailSent;
	}
	
	public String readMailBody(String filename, User user) {
		
		String mailBody = null;
		StringBuffer buffer = new StringBuffer();
		
		Path path = Paths.get(filename);
		
		try(Stream<String> stream = Files.lines(path)){
			stream.forEach(line->{
				buffer.append(line);
			});
			
			mailBody = buffer.toString();
			mailBody = mailBody.replace(Constants.FNAME, user.getFirstname());
			mailBody = mailBody.replace(Constants.LNAME, user.getLastname());
			mailBody = mailBody.replace(Constants.TEMP_PWD, user.getPassword());
			mailBody = mailBody.replace(Constants.EMAIL, user.getEmail());
		}catch(Exception e) {
			e.printStackTrace();
		}
		return mailBody;
	}
	
}
